AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Create Lambda function to query a database and the API Gateway REST API to
  invoke the function
Parameters:
  PPort:
    Description: 'Lambda Environment Variable: PORT'
    Default: 5432
    Type: String
  PS3Bucket:
    Description: Lambda S3Bucket Value
    Default: moxa-api-lambda-postgres
    Type: String
  PSubnetIds:
    Description: Lambda SubnetIds Value
    Default: subnet-eae036b7
    Type: String
  PSecurityGroupIds:
    Description: Lambda SecurityGroupIds Value
    Default: sg-3b17706b
    Type: String
  DBInstanceID:
    Default: moxadb
    Description: database instance identifier
    Type: String
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: >-
      Must begin with a letter and must not end with a hyphen or contain two
      consecutive hyphens.
  DBName:
    Default: moxadb
    Description: database name
    Type: String
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: Must begin with a letter and contain only alphanumeric characters.
  DBInstanceClass:
    Default: db.t2.micro
    Description: DB instance class
    Type: String
    ConstraintDescription: Must select a valid DB instance type.
  DBAllocatedStorage:
    Default: '20'
    Description: The size of the database (GiB)
    Type: Number
    ConstraintDescription: must be between 20 and 65536 GiB
  DBUsername:
    NoEcho: 'true'
    Description: Username for database access
    Type: String
    Default: MoxaUser
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DBPassword:
    NoEcho: 'true'
    Description: Password database access
    Type: String
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.
  GitHubOwner:
    Type: String
    AllowedPattern: '[A-Za-z0-9-]+'
    Default: Faithtosin
  GitHubRepository:
    Type: String
    AllowedPattern: '[A-Za-z0-9-]+'
    Default: db-pipeline
  GitHubBranch:
    Type: String
    AllowedPattern: '[A-Za-z0-9-]+'
    Default: main
  CodeBuildEnvironmentImage:
    Type: String
    Default: 'aws/codebuild/standard:4.0'
Resources:
  rdsDBInstance:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      AllocatedStorage: !Ref DBAllocatedStorage
      AllowMajorVersionUpgrade: false
      AutoMinorVersionUpgrade: true
      BackupRetentionPeriod: 0
      DBInstanceIdentifier: !Ref DBInstanceID
      DBInstanceClass: !Ref DBInstanceClass
      DBName: !Ref DBName
      Engine: postgres
      EngineVersion: 12.4
      MasterUsername: !Ref DBUsername
      MasterUserPassword: >-
        {{resolve:secretsmanager:moxa/dev/db/password:SecretString:DB_ACCESS_PASSWORD}}
      MultiAZ: false
      Port: 5432
      PubliclyAccessible: true
      StorageType: gp2
      Tags:
        - Key: keyname
          Value: value
  LambdaVPCExecutionRole:
    Description: Assumable role allows Lambda to create ENIs and access VPC
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole'
      RoleName: lambda-vpc-execution-role
  ServerlessQuery3LambdaFunction:
    Description: Create Lambda function using serverless-query3.py
    DependsOn:
      - rdsDBInstance
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: ServerlessQuery3
      Handler: serverless-query3.handler
      Role: !GetAtt LambdaVPCExecutionRole.Arn
      Code:
        S3Bucket: !Ref PS3Bucket
        S3Key: serverless-query.zip
      Runtime: python3.6
      VpcConfig:
        SubnetIds:
          - !Ref PSubnetIds
        SecurityGroupIds:
          - !Ref PSecurityGroupIds
      Environment:
        Variables:
          ENDPOINT: !GetAtt rdsDBInstance.Endpoint.Address
          PORT: !Ref PPort
          DATABASE: !Ref DBName
          DBUSER: !Ref DBUsername
          DBPASSWORD: >-
            {{resolve:secretsmanager:moxa/dev/db/password:SecretString:DB_ACCESS_PASSWORD}}
  ServerlessQuery4LambdaFunction:
    Description: Create Lambda function using serverless-query.py
    DependsOn:
      - rdsDBInstance
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: ServerlessQuery4
      Handler: serverless-query.handler
      Role: !GetAtt LambdaVPCExecutionRole.Arn
      Code:
        S3Bucket: !Ref PS3Bucket
        S3Key: serverless-query.zip
      Runtime: python3.6
      VpcConfig:
        SubnetIds:
          - !Ref PSubnetIds
        SecurityGroupIds:
          - !Ref PSecurityGroupIds
      Environment:
        Variables:
          ENDPOINT: !GetAtt rdsDBInstance.Endpoint.Address
          PORT: !Ref PPort
          DATABASE: !Ref DBName
          DBUSER: !Ref DBUsername
          DBPASSWORD: >-
            {{resolve:secretsmanager:moxa/dev/db/password:SecretString:DB_ACCESS_PASSWORD}}
  ServerlessQuery2LambdaFunction:
    Description: Create Lambda function using serverless-query2.py
    DependsOn:
      - rdsDBInstance
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: ServerlessQuery2
      Handler: serverless-query2.handler
      Role: !GetAtt LambdaVPCExecutionRole.Arn
      Code:
        S3Bucket: !Ref PS3Bucket
        S3Key: serverless-query.zip
      Runtime: python3.6
      VpcConfig:
        SubnetIds:
          - !Ref PSubnetIds
        SecurityGroupIds:
          - !Ref PSecurityGroupIds
      Environment:
        Variables:
          ENDPOINT: !GetAtt rdsDBInstance.Endpoint.Address
          PORT: !Ref PPort
          DATABASE: !Ref DBName
          DBUSER: !Ref DBUsername
          DBPASSWORD: >-
            {{resolve:secretsmanager:moxa/dev/db/password:SecretString:DB_ACCESS_PASSWORD}}
  ApiGatewayCloudwatchRole:
    Description: Allow API Gateway to publish to CloudWatch logs
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - apigateway.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      ManagedPolicyArns:
        - >-
          arn:aws:iam::aws:policy/service-role/AmazonApiGatewayPushToCloudWatchLogs
      RoleName: apigateway-cloudwatch-role
  ApiGatewayAccount:
    Description: Pass CloudWatch role to API Gateway Account
    Type: 'AWS::ApiGateway::Account'
    Properties:
      CloudWatchRoleArn: !GetAtt ApiGatewayCloudwatchRole.Arn
  ServerlessQueryApi:
    Description: Create API Gateway REST API
    Type: 'AWS::ApiGateway::RestApi'
    Properties:
      Name: ServerlessQueryApi
  ServerlessQuery4ApiResource:
    Description: Create ServerlessQuery4Api Resource
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ServerlessQueryApi
      ParentId: !GetAtt ServerlessQueryApi.RootResourceId
      PathPart: query4
  LambdaInvoke4Permission:
    Description: Grant ServerlessQueryApi Permission to Invoke ServerlessQuery Lambda function
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt ServerlessQuery4LambdaFunction.Arn
      Action: 'lambda:invokeFunction'
      Principal: apigateway.amazonaws.com
      SourceArn: !Join 
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref ServerlessQueryApi
          - /*
  ServerlessQuery2ApiResource:
    Description: Create ServerlessQuery2Api Resource
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ServerlessQueryApi
      ParentId: !GetAtt ServerlessQueryApi.RootResourceId
      PathPart: query2
  LambdaInvoke2Permission:
    Description: Grant ServerlessQueryApi Permission to Invoke ServerlessQuery Lambda function
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt ServerlessQuery2LambdaFunction.Arn
      Action: 'lambda:invokeFunction'
      Principal: apigateway.amazonaws.com
      SourceArn: !Join 
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref ServerlessQueryApi
          - /*
  ServerlessQuery2ApiMethod:
    Description: Create ServerlessQuery2ApiResource Method
    DependsOn: LambdaInvoke2Permission
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join 
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt 
              - ServerlessQuery2LambdaFunction
              - Arn
            - /invocations
        IntegrationResponses:
          - StatusCode: 200
      ResourceId: !Ref ServerlessQuery2ApiResource
      RestApiId: !Ref ServerlessQueryApi
      MethodResponses:
        - StatusCode: 200
  ServerlessQuery4ApiMethod:
    Description: Create ServerlessQuery4ApiResource Method
    DependsOn: LambdaInvoke4Permission
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join 
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt 
              - ServerlessQuery4LambdaFunction
              - Arn
            - /invocations
        IntegrationResponses:
          - StatusCode: 200
      ResourceId: !Ref ServerlessQuery4ApiResource
      RestApiId: !Ref ServerlessQueryApi
      MethodResponses:
        - StatusCode: 200
  ServerlessQuery3ApiResource:
    Description: Create ServerlessQuery3Api Resource
    Type: 'AWS::ApiGateway::Resource'
    Properties:
      RestApiId: !Ref ServerlessQueryApi
      ParentId: !GetAtt 
        - ServerlessQueryApi
        - RootResourceId
      PathPart: query3
  LambdaInvoke3Permission:
    Description: >-
      Grant ServerlessQueryApi Permission to Invoke ServerlessQuery Lambda
      function
    Type: 'AWS::Lambda::Permission'
    Properties:
      FunctionName: !GetAtt 
        - ServerlessQuery3LambdaFunction
        - Arn
      Action: 'lambda:invokeFunction'
      Principal: apigateway.amazonaws.com
      SourceArn: !Join 
        - ''
        - - 'arn:aws:execute-api:'
          - !Ref 'AWS::Region'
          - ':'
          - !Ref 'AWS::AccountId'
          - ':'
          - !Ref ServerlessQueryApi
          - /*
  ServerlessQuery3ApiMethod:
    Description: Create ServerlessQuery3ApiResource Method
    DependsOn: LambdaInvoke3Permission
    Type: 'AWS::ApiGateway::Method'
    Properties:
      AuthorizationType: NONE
      HttpMethod: GET
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Join 
          - ''
          - - 'arn:aws:apigateway:'
            - !Ref 'AWS::Region'
            - ':lambda:path/2015-03-31/functions/'
            - !GetAtt 
              - ServerlessQuery3LambdaFunction
              - Arn
            - /invocations
        IntegrationResponses:
          - StatusCode: 200
      ResourceId: !Ref ServerlessQuery3ApiResource
      RestApiId: !Ref ServerlessQueryApi
      MethodResponses:
        - StatusCode: 200
  ServerlessQueryApiDeploy:
    Description: Deploy ServerlessQueryApi
    Type: 'AWS::ApiGateway::Deployment'
    DependsOn:
      - ServerlessQuery4ApiMethod
      - ServerlessQuery2ApiMethod
      - ServerlessQuery3ApiMethod
    Properties:
      RestApiId: !Ref ServerlessQueryApi
      StageName: beta
  DBCodeBuildServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: 1
                Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'logs:FilterLogEvents'
                  - 'logs:GetLogEvents'
                Resource:
                  - '*'
              - Sid: 2
                Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:GetObjectVersion'
                  - 's3:PutObject'
                  - 's3:GetBucketAcl'
                  - 's3:GetBucketLocation'
                  - 's3:CreateBucket'
                  - 's3:List*'
                  - 's3:PutObject'
                Resource:
                  - '*'
              - Sid: 3
                Effect: Allow
                Action:
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchGetImage'
                  - 'ecr:BatchCheckLayerAvailability'
                  - 'ecr:PutImage'
                  - 'ecr:InitiateLayerUpload'
                  - 'ecr:UploadLayerPart'
                  - 'ecr:CompleteLayerUpload'
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:InitiateLayerUpload'
                  - 'ec2:DescribeNetworkInterfaces'
                  - 'ec2:CreateNetworkInterface'
                  - 'ec2:DescribeDhcpOptions'
                  - 'ec2:DescribeNetworkInterfaces'
                  - 'ec2:DeleteNetworkInterface'
                  - 'ec2:DescribeSubnets'
                  - 'ec2:DescribeSecurityGroups'
                  - 'ec2:DescribeSecurityGroupReferences'
                  - 'ec2:DescribeStaleSecurityGroups'
                  - 'ec2:DescribeVpcs'
                  - 'ec2:CreateNetworkInterfacePermission'
                Resource:
                  - '*'
              - Sid: 4
                Effect: Allow
                Action:
                  - 'iam:AddRoleToInstanceProfile'
                  - 'iam:AttachRolePolicy'
                  - 'iam:CreateInstanceProfile'
                  - 'iam:CreatePolicy'
                  - 'iam:CreateRole'
                  - 'iam:GetRole'
                  - 'iam:ListAttachedRolePolicies'
                  - 'iam:ListPolicies'
                  - 'iam:ListRoles'
                  - 'iam:PassRole'
                  - 'iam:PutRolePolicy'
                  - 'iam:UpdateAssumeRolePolicy'
                Resource:
                  - '*'
              - Sid: 5
                Effect: Allow
                Action:
                  - 'kms:Encrypt'
                  - 'kms:Decrypt'
                  - 'kms:ReEncrypt*'
                  - 'kms:GenerateDataKey*'
                  - 'kms:DescribeKey'
                Resource:
                  - '*'
  DBCodeBuilProjectDeployDev:
    Type: 'AWS::CodeBuild::Project'
    DependsOn:
      - rdsDBInstance
    Properties:
      Name: !Sub '${AWS::StackName}-deploy-dev'
      ServiceRole: !GetAtt DBCodeBuildServiceRole.Arn
      Source:
        Type: CODEPIPELINE
        BuildSpec: deployspec.yaml
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        PrivilegedMode: true
        ComputeType: BUILD_GENERAL1_SMALL
        Image: !Ref CodeBuildEnvironmentImage
        EnvironmentVariables:
          - Name: ENV_NAME
            Value: dev
          - Name: DBEndPoint
            Value: !GetAtt rdsDBInstance.Endpoint.Address
          - Name: DBname
            Value: !Ref DBName
          - Name: Port
            Value: !Ref PPort
          - Name: DBUser
            Value: !Ref DBUsername
          - Name: Password
            Value: >-
              {{resolve:secretsmanager:moxa/dev/db/password:SecretString:DB_ACCESS_PASSWORD}}
  DBCodePipelineServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: 6
                Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource:
                  - '*'
              - Sid: 7
                Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:GetObjectVersion'
                  - 's3:PutObject'
                  - 's3:GetBucketAcl'
                  - 's3:GetBucketLocation'
                  - 's3:CreateBucket'
                  - 's3:List*'
                Resource:
                  - '*'
              - Sid: 8
                Action:
                  - 'codebuild:BatchGetBuilds'
                  - 'codebuild:StartBuild'
                  - 'codebuild:BatchGetBuildBatches'
                  - 'codebuild:StartBuildBatch'
                Resource: '*'
                Effect: Allow
              - Sid: 9
                Effect: Allow
                Action:
                  - 'codedeploy:CreateDeployment'
                  - 'codedeploy:GetApplicationRevision'
                  - 'codedeploy:GetDeployment'
                  - 'codedeploy:GetDeploymentConfig'
                  - 'codedeploy:RegisterApplicationRevision'
                Resource:
                  - '*'
              - Sid: 10
                Effect: Allow
                Action:
                  - 'ecs:DescribeServices'
                  - 'ecs:DescribeTaskDefinition'
                  - 'ecs:DescribeTasks'
                  - 'ecs:ListTasks'
                  - 'ecs:RegisterTaskDefinition'
                  - 'ecs:UpdateService'
                Resource:
                  - '*'
  DBCodePipelineArtifactStore:
    Type: 'AWS::S3::Bucket'
    Properties:
      VersioningConfiguration:
        Status: Enabled
  DBCodePipelineWebhook:
    Type: 'AWS::CodePipeline::Webhook'
    Properties:
      Authentication: GITHUB_HMAC
      AuthenticationConfiguration:
        SecretToken: >-
          {{resolve:secretsmanager:GITHUB_ACCESS:SecretString:GITHUB_ACCESS_TOKEN}}
      RegisterWithThirdParty: 'true'
      Filters:
        - JsonPath: $.ref
          MatchEquals: 'refs/heads/{Branch}'
        - JsonPath: $.repository.name
          MatchEquals: '{Repo}'
      TargetPipeline: !Ref DBCodePipeline
      TargetAction: Source
      TargetPipelineVersion: !GetAtt DBCodePipeline.Version
  DBCodePipeline:
    Type: 'AWS::CodePipeline::Pipeline'
    Properties:
      Name: !Ref 'AWS::StackName'
      RoleArn: !GetAtt DBCodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref DBCodePipelineArtifactStore
      Stages:
        - Name: Source
          Actions:
            - Name: Source
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              Configuration:
                Owner: !Ref GitHubOwner
                Repo: !Ref GitHubRepository
                Branch: !Ref GitHubBranch
                PollForSourceChanges: false
                OAuthToken: >-
                  {{resolve:secretsmanager:GITHUB_ACCESS:SecretString:GITHUB_ACCESS_TOKEN}}
              OutputArtifacts:
                - Name: SourceCode
        - Name: Dev
          Actions:
            - Name: Deploy
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              Configuration:
                ProjectName: !Ref DBCodeBuilProjectDeployDev
              InputArtifacts:
                - Name: SourceCode
              OutputArtifacts:
                - Name: BuildOutput
        - Name: Qa
          Actions:
            - Name: Approval
              RunOrder: 2
              ActionTypeId:
                Category: Approval
                Owner: AWS
                Provider: Manual
                Version: '1'
              Configuration:
                CustomData: Approve or Reject this change after running tests
Outputs:
  DBHostName:
    Description: database hostname
    Value: !GetAtt 
      - rdsDBInstance
      - Endpoint.Address